package repository

import (
	"encoding/json"
	"fmt"
	"time"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/mahakamcloud/mahakam/pkg/api/v1/models"
	"github.com/mahakamcloud/mahakam/pkg/config"
	"github.com/mahakamcloud/mahakam/pkg/kvstore"
	uuid "github.com/satori/go.uuid"
)

const (
	RoleGreNetworkLabelValue              = "gre-network"
	KindGreNetwork           ResourceKind = "gre-network"
)

// GRENetworkRepository is wrapper of GRENetworkRepository model generated by Swagger.
type GRENetworkRepository struct {
	store *kvstore.KVStore
}

func NewGRENetworkRepository() (*GRENetworkRepository, error) {
	store, err := kvstore.New()
	if err != nil {
		return nil, err
	}
	return &GRENetworkRepository{store}, nil
}

func (r *GRENetworkRepository) Put(grenet *models.GreNetwork) error {
	r.addMandatoryFields(grenet)
	key := fmt.Sprintf("%s/%s/%s", grenet.Kind, grenet.Owner, swag.StringValue(grenet.Name))
	val, err := json.Marshal(grenet)
	if err != nil {
		return err
	}
	return r.store.Put(key, val)
}

func (r *GRENetworkRepository) List() ([]*models.GreNetwork, error) {
	// TODO : Remove hard coded values
	key := fmt.Sprintf("%s/%s", "gre-networks", "mahakam")

	vals, err := r.store.List(key)
	if err != nil {
		return nil, err
	}

	networks := make([]*models.GreNetwork, 0)

	for _, v := range vals {
		gren := &models.GreNetwork{}
		err := json.Unmarshal(v, gren)
		if err != nil {
			return nil, fmt.Errorf("Error unmarshalling json value. Value: %v, Error: %v", string(v), err.Error())
		}
		networks = append(networks, gren)
	}
	return networks, nil
}

func (r *GRENetworkRepository) addMandatoryFields(grenet *models.GreNetwork) {
	if grenet.Kind == "" {
		grenet.Kind = string(KindGreNetwork)
	}

	if grenet.Owner == "" {
		grenet.Owner = config.ResourceOwnerMahakam
	}

	if len(grenet.Labels) == 0 {
		grenet.Labels = []*models.Label{
			&models.Label{
				Key:   RoleLabelKey,
				Value: RoleGreNetworkLabelValue,
			},
		}
	}

	if grenet.ID == "" {
		grenet.ID = strfmt.UUID(uuid.NewV4().String())
	}

	now := time.Now()
	grenet.CreatedAt = strfmt.DateTime(now)
	grenet.ModifiedAt = strfmt.DateTime(now)
}
