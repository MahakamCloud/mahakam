package repository

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"github.com/go-openapi/swag"
	uuid "github.com/satori/go.uuid"

	"github.com/go-openapi/strfmt"
	"github.com/mahakamcloud/mahakam/pkg/api/v1/models"
	"github.com/mahakamcloud/mahakam/pkg/config"
	"github.com/mahakamcloud/mahakam/pkg/kvstore"
)

const (
	// RoleLabelKey represents key for Label role
	RoleLabelKey = "Role"

	// RoleBareMetalHostLabelValue represents role value of bare metal host
	RoleBareMetalHostLabelValue = "bare-metal-host"
)

// BareMetalHostWrapper is wrapper of BareMetalHostWrapper model generated by Swagger.
type BareMetalHostWrapper struct {
	resource *models.BareMetalHost
}

func NewBareMetalHostWrapper(bmh *models.BareMetalHost) *BareMetalHostWrapper {
	b := &BareMetalHostWrapper{bmh}

	if b.resource.Kind == "" {
		b.resource.Kind = string(KindBareMetalHost)
	}

	if b.resource.Owner == "" {
		b.resource.Owner = config.ResourceOwnerMahakam
	}

	if len(b.resource.Labels) == 0 {
		b.resource.Labels = []*models.Label{
			&models.Label{
				Key:   RoleLabelKey,
				Value: RoleBareMetalHostLabelValue,
			},
		}
	}

	return b
}

func (b *BareMetalHostWrapper) Save() error {
	store, err := kvstore.New()
	if err != nil {
		return err
	}

	key := b.BuildKey()
	b.AddMetadata()
	val, err := b.MarshalJSON()
	if err != nil {
		return err
	}

	return store.Put(key, val)
}

// BuildKey generates key for a resource
func (b *BareMetalHostWrapper) BuildKey(optKeys ...string) string {
	keys := strings.Join(optKeys, "/")
	return fmt.Sprintf("%s/%s/%s/%s", b.resource.Kind, b.resource.Owner, swag.StringValue(b.resource.Name), keys)
}

// AddMetadata returns a resource
func (b *BareMetalHostWrapper) AddMetadata() ResourceBuilder {
	if b.resource.ID == "" {
		b.resource.ID = strfmt.UUID(uuid.NewV4().String())
	}

	now := time.Now()
	b.resource.CreatedAt = strfmt.DateTime(now)
	b.resource.ModifiedAt = strfmt.DateTime(now)

	return b
}

// MarshalJSON returns a resource
func (b *BareMetalHostWrapper) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.resource)
}

// UnmarshalJSON returns a resource
func (b *BareMetalHostWrapper) UnmarshalJSON(in []byte) error {
	return json.Unmarshal(in, &b.resource)
}

// ID return ID of BareMetalHostBuilder resource
func (b *BareMetalHostWrapper) ID() string {
	return string(b.resource.ID)
}

// *************** DO NOT TOUCH ************************
// BareMetalHostBuilder is wrapper of BareMetalHost model
type BareMetalHostBuilderList struct {
	Items []*BareMetalHostWrapper
}

func (b *BareMetalHostBuilderList) ResourceBuilder() ResourceBuilder {
	return &BareMetalHostWrapper{}
}

// WithItems returns list of Cluster
func (l *BareMetalHostBuilderList) WithItems(items []ResourceBuilder) {
	for _, i := range items {
		b := i.(*BareMetalHostWrapper)
		l.Items = append(l.Items, b)
	}
}

// GetBareMetalHosts returns list of Cluster
func (l *BareMetalHostBuilderList) GetBareMetalHosts() []*models.BareMetalHost {
	b := []*models.BareMetalHost{}
	for _, v := range l.Items {
		b = append(b, v.resource)
	}

	return b
}
