// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/validation/validation.go

// Package validation is a generated GoMock package.
package validation

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	logrus "github.com/sirupsen/logrus"
)

// MockValidator is a mock of Validator interface
type MockValidator struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder
}

// MockValidatorMockRecorder is the mock recorder for MockValidator
type MockValidatorMockRecorder struct {
	mock *MockValidator
}

// NewMockValidator creates a new mock instance
func NewMockValidator(ctrl *gomock.Controller) *MockValidator {
	mock := &MockValidator{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidator) EXPECT() *MockValidatorMockRecorder {
	return m.recorder
}

// ValidateNWithDelay mocks base method
func (m *MockValidator) ValidateNWithDelay(owner, clustername string, timeout time.Duration, log logrus.FieldLogger, count int, delay time.Duration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateNWithDelay", owner, clustername, timeout, log, count, delay)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ValidateNWithDelay indicates an expected call of ValidateNWithDelay
func (mr *MockValidatorMockRecorder) ValidateNWithDelay(owner, clustername, timeout, log, count, delay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateNWithDelay", reflect.TypeOf((*MockValidator)(nil).ValidateNWithDelay), owner, clustername, timeout, log, count, delay)
}
