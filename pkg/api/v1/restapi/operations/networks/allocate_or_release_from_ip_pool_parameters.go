// Code generated by go-swagger; DO NOT EDIT.

package networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAllocateOrReleaseFromIPPoolParams creates a new AllocateOrReleaseFromIPPoolParams object
// no default values defined in spec.
func NewAllocateOrReleaseFromIPPoolParams() AllocateOrReleaseFromIPPoolParams {

	return AllocateOrReleaseFromIPPoolParams{}
}

// AllocateOrReleaseFromIPPoolParams contains all the bound params for the allocate or release from Ip pool operation
// typically these are obtained from a http.Request
//
// swagger:parameters allocateOrReleaseFromIpPool
type AllocateOrReleaseFromIPPoolParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: query
	*/
	Action *string
	/*
	  In: body
	*/
	AllocatedIP interface{}
	/*
	  In: path
	*/
	PoolID *string
	/*
	  In: query
	*/
	ReleasedIP *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewAllocateOrReleaseFromIPPoolParams() beforehand.
func (o *AllocateOrReleaseFromIPPoolParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qAction, qhkAction, _ := qs.GetOK("action")
	if err := o.bindAction(qAction, qhkAction, route.Formats); err != nil {
		res = append(res, err)
	}

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body interface{}
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			res = append(res, errors.NewParseError("allocatedIp", "body", "", err))
		} else {
			// no validation on generic interface
			o.AllocatedIP = body
		}
	}
	rPoolID, rhkPoolID, _ := route.Params.GetOK("poolId")
	if err := o.bindPoolID(rPoolID, rhkPoolID, route.Formats); err != nil {
		res = append(res, err)
	}

	qReleasedIP, qhkReleasedIP, _ := qs.GetOK("releasedIP")
	if err := o.bindReleasedIP(qReleasedIP, qhkReleasedIP, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAction binds and validates parameter Action from query.
func (o *AllocateOrReleaseFromIPPoolParams) bindAction(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Action = &raw

	if err := o.validateAction(formats); err != nil {
		return err
	}

	return nil
}

// validateAction carries on validations for parameter Action
func (o *AllocateOrReleaseFromIPPoolParams) validateAction(formats strfmt.Registry) error {

	if err := validate.Enum("action", "query", *o.Action, []interface{}{"ALLOCATE", "RELEASE"}); err != nil {
		return err
	}

	return nil
}

// bindPoolID binds and validates parameter PoolID from path.
func (o *AllocateOrReleaseFromIPPoolParams) bindPoolID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// Parameter is provided by construction from the route

	o.PoolID = &raw

	return nil
}

// bindReleasedIP binds and validates parameter ReleasedIP from query.
func (o *AllocateOrReleaseFromIPPoolParams) bindReleasedIP(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.ReleasedIP = &raw

	return nil
}
