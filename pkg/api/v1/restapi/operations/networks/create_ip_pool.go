// Code generated by go-swagger; DO NOT EDIT.

package networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateIPPoolHandlerFunc turns a function with the right signature into a create Ip pool handler
type CreateIPPoolHandlerFunc func(CreateIPPoolParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateIPPoolHandlerFunc) Handle(params CreateIPPoolParams) middleware.Responder {
	return fn(params)
}

// CreateIPPoolHandler interface for that can handle valid create Ip pool params
type CreateIPPoolHandler interface {
	Handle(CreateIPPoolParams) middleware.Responder
}

// NewCreateIPPool creates a new http.Handler for the create Ip pool operation
func NewCreateIPPool(ctx *middleware.Context, handler CreateIPPoolHandler) *CreateIPPool {
	return &CreateIPPool{Context: ctx, Handler: handler}
}

/*CreateIPPool swagger:route POST /networks/pools/ipPools networks createIpPool

CreateIPPool create Ip pool API

*/
type CreateIPPool struct {
	Context *middleware.Context
	Handler CreateIPPoolHandler
}

func (o *CreateIPPool) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateIPPoolParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
