// Code generated by go-swagger; DO NOT EDIT.

package networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/mahakamcloud/mahakam/pkg/api/v1/models"
)

// AllocateOrReleaseFromIPPoolCreatedCode is the HTTP code returned for type AllocateOrReleaseFromIPPoolCreated
const AllocateOrReleaseFromIPPoolCreatedCode int = 201

/*AllocateOrReleaseFromIPPoolCreated Allocated new IP from IP pool

swagger:response allocateOrReleaseFromIpPoolCreated
*/
type AllocateOrReleaseFromIPPoolCreated struct {

	/*
	  In: Body
	*/
	Payload *models.AllocatedIPPool `json:"body,omitempty"`
}

// NewAllocateOrReleaseFromIPPoolCreated creates AllocateOrReleaseFromIPPoolCreated with default headers values
func NewAllocateOrReleaseFromIPPoolCreated() *AllocateOrReleaseFromIPPoolCreated {

	return &AllocateOrReleaseFromIPPoolCreated{}
}

// WithPayload adds the payload to the allocate or release from Ip pool created response
func (o *AllocateOrReleaseFromIPPoolCreated) WithPayload(payload *models.AllocatedIPPool) *AllocateOrReleaseFromIPPoolCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the allocate or release from Ip pool created response
func (o *AllocateOrReleaseFromIPPoolCreated) SetPayload(payload *models.AllocatedIPPool) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AllocateOrReleaseFromIPPoolCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*AllocateOrReleaseFromIPPoolDefault generic error response

swagger:response allocateOrReleaseFromIpPoolDefault
*/
type AllocateOrReleaseFromIPPoolDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAllocateOrReleaseFromIPPoolDefault creates AllocateOrReleaseFromIPPoolDefault with default headers values
func NewAllocateOrReleaseFromIPPoolDefault(code int) *AllocateOrReleaseFromIPPoolDefault {
	if code <= 0 {
		code = 500
	}

	return &AllocateOrReleaseFromIPPoolDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the allocate or release from Ip pool default response
func (o *AllocateOrReleaseFromIPPoolDefault) WithStatusCode(code int) *AllocateOrReleaseFromIPPoolDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the allocate or release from Ip pool default response
func (o *AllocateOrReleaseFromIPPoolDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the allocate or release from Ip pool default response
func (o *AllocateOrReleaseFromIPPoolDefault) WithPayload(payload *models.Error) *AllocateOrReleaseFromIPPoolDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the allocate or release from Ip pool default response
func (o *AllocateOrReleaseFromIPPoolDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AllocateOrReleaseFromIPPoolDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
