// Code generated by go-swagger; DO NOT EDIT.

package clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateKubeClusterHandlerFunc turns a function with the right signature into a create kube cluster handler
type CreateKubeClusterHandlerFunc func(CreateKubeClusterParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateKubeClusterHandlerFunc) Handle(params CreateKubeClusterParams) middleware.Responder {
	return fn(params)
}

// CreateKubeClusterHandler interface for that can handle valid create kube cluster params
type CreateKubeClusterHandler interface {
	Handle(CreateKubeClusterParams) middleware.Responder
}

// NewCreateKubeCluster creates a new http.Handler for the create kube cluster operation
func NewCreateKubeCluster(ctx *middleware.Context, handler CreateKubeClusterHandler) *CreateKubeCluster {
	return &CreateKubeCluster{Context: ctx, Handler: handler}
}

/*CreateKubeCluster swagger:route POST /kube-clusters clusters createKubeCluster

CreateKubeCluster create kube cluster API

*/
type CreateKubeCluster struct {
	Context *middleware.Context
	Handler CreateKubeClusterHandler
}

func (o *CreateKubeCluster) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateKubeClusterParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
