// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Cluster cluster
// swagger:model cluster
type Cluster struct {

	// cluster plan
	// Enum: [small medium large]
	ClusterPlan string `json:"clusterPlan,omitempty"`

	// id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// name
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// num nodes
	// Maximum: 10
	// Minimum: 3
	NumNodes int64 `json:"numNodes,omitempty"`

	// status
	// Enum: [pending running succeeded failed unknown]
	Status string `json:"status,omitempty"`
}

// Validate validates this cluster
func (m *Cluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterPlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumNodes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var clusterTypeClusterPlanPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["small","medium","large"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterTypeClusterPlanPropEnum = append(clusterTypeClusterPlanPropEnum, v)
	}
}

const (

	// ClusterClusterPlanSmall captures enum value "small"
	ClusterClusterPlanSmall string = "small"

	// ClusterClusterPlanMedium captures enum value "medium"
	ClusterClusterPlanMedium string = "medium"

	// ClusterClusterPlanLarge captures enum value "large"
	ClusterClusterPlanLarge string = "large"
)

// prop value enum
func (m *Cluster) validateClusterPlanEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, clusterTypeClusterPlanPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Cluster) validateClusterPlan(formats strfmt.Registry) error {

	if swag.IsZero(m.ClusterPlan) { // not required
		return nil
	}

	// value enum
	if err := m.validateClusterPlanEnum("clusterPlan", "body", m.ClusterPlan); err != nil {
		return err
	}

	return nil
}

func (m *Cluster) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	return nil
}

func (m *Cluster) validateNumNodes(formats strfmt.Registry) error {

	if swag.IsZero(m.NumNodes) { // not required
		return nil
	}

	if err := validate.MinimumInt("numNodes", "body", int64(m.NumNodes), 3, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("numNodes", "body", int64(m.NumNodes), 10, false); err != nil {
		return err
	}

	return nil
}

var clusterTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pending","running","succeeded","failed","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterTypeStatusPropEnum = append(clusterTypeStatusPropEnum, v)
	}
}

const (

	// ClusterStatusPending captures enum value "pending"
	ClusterStatusPending string = "pending"

	// ClusterStatusRunning captures enum value "running"
	ClusterStatusRunning string = "running"

	// ClusterStatusSucceeded captures enum value "succeeded"
	ClusterStatusSucceeded string = "succeeded"

	// ClusterStatusFailed captures enum value "failed"
	ClusterStatusFailed string = "failed"

	// ClusterStatusUnknown captures enum value "unknown"
	ClusterStatusUnknown string = "unknown"
)

// prop value enum
func (m *Cluster) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, clusterTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Cluster) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Cluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Cluster) UnmarshalBinary(b []byte) error {
	var res Cluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
