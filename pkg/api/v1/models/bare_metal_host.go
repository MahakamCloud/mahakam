// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BareMetalHost bare metal host
// swagger:model bareMetalHost
type BareMetalHost struct {
	BaseResource

	// ip
	// Required: true
	// Format: ipv4
	IP *strfmt.IPv4 `json:"ip"`

	// ip mask
	// Required: true
	IPMask *int8 `json:"ipMask"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *BareMetalHost) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 BaseResource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.BaseResource = aO0

	// now for regular properties
	var propsBareMetalHost struct {
		IP *strfmt.IPv4 `json:"ip"`

		IPMask *int8 `json:"ipMask"`
	}
	if err := swag.ReadJSON(raw, &propsBareMetalHost); err != nil {
		return err
	}
	m.IP = propsBareMetalHost.IP

	m.IPMask = propsBareMetalHost.IPMask

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m BareMetalHost) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.BaseResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsBareMetalHost struct {
		IP *strfmt.IPv4 `json:"ip"`

		IPMask *int8 `json:"ipMask"`
	}
	propsBareMetalHost.IP = m.IP

	propsBareMetalHost.IPMask = m.IPMask

	jsonDataPropsBareMetalHost, errBareMetalHost := swag.WriteJSON(propsBareMetalHost)
	if errBareMetalHost != nil {
		return nil, errBareMetalHost
	}
	_parts = append(_parts, jsonDataPropsBareMetalHost)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this bare metal host
func (m *BareMetalHost) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BaseResource
	if err := m.BaseResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPMask(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BareMetalHost) validateIP(formats strfmt.Registry) error {

	if err := validate.Required("ip", "body", m.IP); err != nil {
		return err
	}

	if err := validate.FormatOf("ip", "body", "ipv4", m.IP.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BareMetalHost) validateIPMask(formats strfmt.Registry) error {

	if err := validate.Required("ipMask", "body", m.IPMask); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BareMetalHost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BareMetalHost) UnmarshalBinary(b []byte) error {
	var res BareMetalHost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
