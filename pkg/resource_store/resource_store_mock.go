// Automatically generated by MockGen. DO NOT EDIT!
// Source: pkg/resource_store/resource_store.go

package resourcestore

import (
	gomock "github.com/golang/mock/gomock"
	builder "github.com/mahakamcloud/mahakam/pkg/resource_store/builder"
	resource "github.com/mahakamcloud/mahakam/pkg/resource_store/resource"
)

// Mock of ResourceStore interface
type MockResourceStore struct {
	ctrl     *gomock.Controller
	recorder *_MockResourceStoreRecorder
}

// Recorder for MockResourceStore (not exported)
type _MockResourceStoreRecorder struct {
	mock *MockResourceStore
}

func NewMockResourceStore(ctrl *gomock.Controller) *MockResourceStore {
	mock := &MockResourceStore{ctrl: ctrl}
	mock.recorder = &_MockResourceStoreRecorder{mock}
	return mock
}

func (_m *MockResourceStore) EXPECT() *_MockResourceStoreRecorder {
	return _m.recorder
}

func (_m *MockResourceStore) AddV1(builder builder.ResourceBuilder) (string, error) {
	ret := _m.ctrl.Call(_m, "AddV1", builder)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockResourceStoreRecorder) AddV1(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddV1", arg0)
}

func (_m *MockResourceStore) ListV1(owner string, kind builder.ResourceKind, list builder.ResourceBuilderList) error {
	ret := _m.ctrl.Call(_m, "ListV1", owner, kind, list)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockResourceStoreRecorder) ListV1(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListV1", arg0, arg1, arg2)
}

func (_m *MockResourceStore) Add(resource resource.Resource) (string, error) {
	ret := _m.ctrl.Call(_m, "Add", resource)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockResourceStoreRecorder) Add(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Add", arg0)
}

func (_m *MockResourceStore) Get(resource resource.Resource) error {
	ret := _m.ctrl.Call(_m, "Get", resource)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockResourceStoreRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockResourceStore) List(owner string, kind resource.ResourceKind, list resource.ResourceList) error {
	ret := _m.ctrl.Call(_m, "List", owner, kind, list)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockResourceStoreRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "List", arg0, arg1, arg2)
}

func (_m *MockResourceStore) Update(resource resource.Resource) (int64, error) {
	ret := _m.ctrl.Call(_m, "Update", resource)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockResourceStoreRecorder) Update(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Update", arg0)
}

func (_m *MockResourceStore) Delete(owner string, id string, resource resource.Resource) error {
	ret := _m.ctrl.Call(_m, "Delete", owner, id, resource)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockResourceStoreRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0, arg1, arg2)
}

func (_m *MockResourceStore) AddFromPath(path string, resource resource.Resource) (string, error) {
	ret := _m.ctrl.Call(_m, "AddFromPath", path, resource)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockResourceStoreRecorder) AddFromPath(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddFromPath", arg0, arg1)
}

func (_m *MockResourceStore) GetFromPath(path string, resource resource.Resource) error {
	ret := _m.ctrl.Call(_m, "GetFromPath", path, resource)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockResourceStoreRecorder) GetFromPath(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFromPath", arg0, arg1)
}

func (_m *MockResourceStore) ListFromPath(path string, filter Filter, resources resource.ResourceList) error {
	ret := _m.ctrl.Call(_m, "ListFromPath", path, filter, resources)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockResourceStoreRecorder) ListFromPath(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListFromPath", arg0, arg1, arg2)
}

func (_m *MockResourceStore) ListKeysFromPath(path string) ([]string, error) {
	ret := _m.ctrl.Call(_m, "ListKeysFromPath", path)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockResourceStoreRecorder) ListKeysFromPath(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListKeysFromPath", arg0)
}

func (_m *MockResourceStore) UpdateFromPath(path string, resource resource.Resource) (int64, error) {
	ret := _m.ctrl.Call(_m, "UpdateFromPath", path, resource)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockResourceStoreRecorder) UpdateFromPath(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateFromPath", arg0, arg1)
}

func (_m *MockResourceStore) DeleteFromPath(path string) error {
	ret := _m.ctrl.Call(_m, "DeleteFromPath", path)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockResourceStoreRecorder) DeleteFromPath(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteFromPath", arg0)
}

func (_m *MockResourceStore) KeyExists(path string) bool {
	ret := _m.ctrl.Call(_m, "KeyExists", path)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockResourceStoreRecorder) KeyExists(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KeyExists", arg0)
}
