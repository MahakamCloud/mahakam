// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/resource_store/resource_store.go

// Package resource_store is a generated GoMock package.
package resourcestore

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	resource "github.com/mahakamcloud/mahakam/pkg/resource_store/resource"
)

// MockResourceStore is a mock of ResourceStore interface
type MockResourceStore struct {
	ctrl     *gomock.Controller
	recorder *MockResourceStoreMockRecorder
}

// MockResourceStoreMockRecorder is the mock recorder for MockResourceStore
type MockResourceStoreMockRecorder struct {
	mock *MockResourceStore
}

// NewMockResourceStore creates a new mock instance
func NewMockResourceStore(ctrl *gomock.Controller) *MockResourceStore {
	mock := &MockResourceStore{ctrl: ctrl}
	mock.recorder = &MockResourceStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResourceStore) EXPECT() *MockResourceStoreMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockResourceStore) Add(resource resource.Resource) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", resource)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add
func (mr *MockResourceStoreMockRecorder) Add(resource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockResourceStore)(nil).Add), resource)
}

// Get mocks base method
func (m *MockResourceStore) Get(resource resource.Resource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", resource)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockResourceStoreMockRecorder) Get(resource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockResourceStore)(nil).Get), resource)
}

// List mocks base method
func (m *MockResourceStore) List(owner string, kind resource.Kind, list resource.ResourceList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", owner, kind, list)
	ret0, _ := ret[0].(error)
	return ret0
}

// List indicates an expected call of List
func (mr *MockResourceStoreMockRecorder) List(owner, kind, list interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockResourceStore)(nil).List), owner, kind, list)
}

// Update mocks base method
func (m *MockResourceStore) Update(resource resource.Resource) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", resource)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockResourceStoreMockRecorder) Update(resource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockResourceStore)(nil).Update), resource)
}

// Delete mocks base method
func (m *MockResourceStore) Delete(owner, id string, resource resource.Resource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", owner, id, resource)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockResourceStoreMockRecorder) Delete(owner, id, resource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockResourceStore)(nil).Delete), owner, id, resource)
}

// AddFromPath mocks base method
func (m *MockResourceStore) AddFromPath(path string, resource resource.Resource) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFromPath", path, resource)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFromPath indicates an expected call of AddFromPath
func (mr *MockResourceStoreMockRecorder) AddFromPath(path, resource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFromPath", reflect.TypeOf((*MockResourceStore)(nil).AddFromPath), path, resource)
}

// GetFromPath mocks base method
func (m *MockResourceStore) GetFromPath(path string, resource resource.Resource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromPath", path, resource)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFromPath indicates an expected call of GetFromPath
func (mr *MockResourceStoreMockRecorder) GetFromPath(path, resource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromPath", reflect.TypeOf((*MockResourceStore)(nil).GetFromPath), path, resource)
}

// ListFromPath mocks base method
func (m *MockResourceStore) ListFromPath(path string, filter Filter, resources resource.ResourceList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFromPath", path, filter, resources)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFromPath indicates an expected call of ListFromPath
func (mr *MockResourceStoreMockRecorder) ListFromPath(path, filter, resources interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFromPath", reflect.TypeOf((*MockResourceStore)(nil).ListFromPath), path, filter, resources)
}

// ListKeysFromPath mocks base method
func (m *MockResourceStore) ListKeysFromPath(path string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeysFromPath", path)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeysFromPath indicates an expected call of ListKeysFromPath
func (mr *MockResourceStoreMockRecorder) ListKeysFromPath(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeysFromPath", reflect.TypeOf((*MockResourceStore)(nil).ListKeysFromPath), path)
}

// UpdateFromPath mocks base method
func (m *MockResourceStore) UpdateFromPath(path string, resource resource.Resource) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFromPath", path, resource)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFromPath indicates an expected call of UpdateFromPath
func (mr *MockResourceStoreMockRecorder) UpdateFromPath(path, resource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFromPath", reflect.TypeOf((*MockResourceStore)(nil).UpdateFromPath), path, resource)
}

// DeleteFromPath mocks base method
func (m *MockResourceStore) DeleteFromPath(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromPath", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFromPath indicates an expected call of DeleteFromPath
func (mr *MockResourceStoreMockRecorder) DeleteFromPath(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromPath", reflect.TypeOf((*MockResourceStore)(nil).DeleteFromPath), path)
}

// KeyExists mocks base method
func (m *MockResourceStore) KeyExists(path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyExists", path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// KeyExists indicates an expected call of KeyExists
func (mr *MockResourceStoreMockRecorder) KeyExists(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyExists", reflect.TypeOf((*MockResourceStore)(nil).KeyExists), path)
}
